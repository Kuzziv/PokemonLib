<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PokemonGameLib</name>
    </assembly>
    <members>
        <member name="T:PokemonGameLib.Commands.AttackCommand">
            <summary>
            Represents an attack command in a Pokémon battle.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Commands.AttackCommand._move">
            <summary>
            The move to be used in the attack.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Commands.AttackCommand.#ctor(PokemonGameLib.Interfaces.IBattle,PokemonGameLib.Interfaces.IMove)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Commands.AttackCommand"/> class.
            </summary>
            <param name="battle">The current battle instance.</param>
            <param name="move">The move to be used in the attack.</param>
        </member>
        <member name="M:PokemonGameLib.Commands.AttackCommand.Execute">
            <summary>
            Executes the attack command, performing an attack in the battle.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Commands.BattleCommand">
            <summary>
            Represents a command in a Pokémon battle.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Commands.BattleCommand._battle">
            <summary>
            The current battle instance.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Commands.BattleCommand.#ctor(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Commands.BattleCommand"/> class.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="M:PokemonGameLib.Commands.BattleCommand.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Commands.SwitchCommand">
            <summary>
            Represents a switch Pokémon command in a Pokémon battle.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Commands.SwitchCommand._trainer">
            <summary>
            The trainer performing the switch.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Commands.SwitchCommand._newPokemon">
            <summary>
            The new Pokémon to switch to.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Commands.SwitchCommand.#ctor(PokemonGameLib.Interfaces.IBattle,PokemonGameLib.Models.Trainers.Trainer,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Commands.SwitchCommand"/> class.
            </summary>
            <param name="battle">The current battle instance.</param>
            <param name="trainer">The trainer performing the switch.</param>
            <param name="newPokemon">The new Pokémon to switch to.</param>
        </member>
        <member name="M:PokemonGameLib.Commands.SwitchCommand.Execute">
            <summary>
            Executes the switch command, switching the trainer's current Pokémon with a new one.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Commands.UseItemCommand">
            <summary>
            Represents a use item command in a Pokémon battle.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Commands.UseItemCommand._trainer">
            <summary>
            The trainer using the item.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Commands.UseItemCommand._item">
            <summary>
            The item to be used.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Commands.UseItemCommand._targetPokemon">
            <summary>
            The target Pokémon of the item.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Commands.UseItemCommand.#ctor(PokemonGameLib.Interfaces.IBattle,PokemonGameLib.Models.Trainers.Trainer,PokemonGameLib.Interfaces.IItem,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Commands.UseItemCommand"/> class.
            </summary>
            <param name="battle">The current battle instance.</param>
            <param name="trainer">The trainer using the item.</param>
            <param name="item">The item to be used.</param>
            <param name="targetPokemon">The target Pokémon of the item.</param>
        </member>
        <member name="M:PokemonGameLib.Commands.UseItemCommand.Execute">
            <summary>
            Executes the use item command, using the item on the target Pokémon.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Exceptions.InvalidMoveException">
            <summary>
            Exception thrown when an invalid move is attempted in a Pokémon battle.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Exceptions.InvalidMoveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Exceptions.InvalidMoveException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PokemonGameLib.Exceptions.InvalidMoveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Exceptions.InvalidMoveException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:PokemonGameLib.Exceptions.InvalidPokemonSwitchException">
            <summary>
            Exception thrown when an invalid Pokémon switch is attempted.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Exceptions.InvalidPokemonSwitchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Exceptions.InvalidPokemonSwitchException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PokemonGameLib.Exceptions.InvalidPokemonSwitchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Exceptions.InvalidPokemonSwitchException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:PokemonGameLib.Exceptions.ItemNotFoundException">
            <summary>
            Exception thrown when an item is not found in the trainer's inventory.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Exceptions.ItemNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Exceptions.ItemNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PokemonGameLib.Exceptions.ItemNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Exceptions.ItemNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:PokemonGameLib.Exceptions.PokemonFaintedException">
            <summary>
            Exception thrown when a Pokémon that has fainted is attempted to be used in battle.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Exceptions.PokemonFaintedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Exceptions.PokemonFaintedException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:PokemonGameLib.Exceptions.PokemonFaintedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Exceptions.PokemonFaintedException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:PokemonGameLib.Interfaces.IBattle">
            <summary>
            Represents a battle between two trainers in the Pokémon game.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IBattle.CurrentTrainer">
            <summary>
            Gets the current trainer whose turn it is.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IBattle.OpponentTrainer">
            <summary>
            Gets the opponent trainer in the current battle.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IBattle.StartBattle">
            <summary>
            Starts the battle between the two trainers.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IBattle.PerformAttack(PokemonGameLib.Interfaces.IMove)">
            <summary>
            Executes an attack using the specified move.
            </summary>
            <param name="move">The move to be used in the attack.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IBattle.PerformSwitch(PokemonGameLib.Interfaces.ITrainer,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Switches the current Pokémon with the specified new Pokémon.
            </summary>
            <param name="newPokemon">The new Pokémon to switch to.</param>
            <param name="trainer">The trainer who is switching Pokémon.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IBattle.PerformUseItem(PokemonGameLib.Interfaces.IItem,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Uses the specified item on the target Pokémon.
            </summary>
            <param name="item">The item to be used.</param>
            <param name="targetPokemon">The target Pokémon to use the item on.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IBattle.SwitchTurns">
            <summary>
            Switches the turn to the other trainer.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IBattle.IsBattleOver">
            <summary>
            Determines whether the battle is over.
            </summary>
            <returns>True if the battle is over; otherwise, false.</returns>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IBattle.GetWinner">
            <summary>
            Gets the winner of the battle.
            </summary>
            <returns>The winning trainer. or null</returns>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IBattle.DetermineBattleResult">
            <summary>
            Determines the result of the battle.
            </summary>
            <returns>A string representing the result of the battle.</returns>
        </member>
        <member name="T:PokemonGameLib.Interfaces.ICommand">
            <summary>
            Represents a command that can be executed within the game.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ICommand.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Interfaces.IEvolution">
            <summary>
            Represents a Pokémon evolution condition, determining when a Pokémon can evolve.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IEvolution.EvolvedFormName">
            <summary>
            Gets the name of the evolved form.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IEvolution.RequiredLevel">
            <summary>
            Gets the level required for the evolution to occur.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IEvolution.CanEvolve(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Determines if a Pokémon can evolve based on its level.
            </summary>
            <param name="pokemon">The Pokémon to check.</param>
            <returns><c>true</c> if the Pokémon can evolve; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:PokemonGameLib.Interfaces.IItem">
            <summary>
            Represents an item that can be used in battles to affect Pokémon or trainers.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IItem.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IItem.Description">
            <summary>
            Gets the description of the item.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IItem.Use(PokemonGameLib.Interfaces.ITrainer,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Uses the item on a target Pokémon.
            </summary>
            <param name="trainer">The trainer using the item.</param>
            <param name="target">The target Pokémon.</param>
        </member>
        <member name="T:PokemonGameLib.Interfaces.ILogger">
            <summary>
            Represents a logger that can be used to log messages to the console.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ILogger.LogInfo(System.String)">
            <summary>
            Logs an informational message to the console.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ILogger.LogWarning(System.String)">
            <summary>
            Logs a warning message to the console.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ILogger.LogError(System.String)">
            <summary>
            Logs an error message to the console.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:PokemonGameLib.Interfaces.IMove">
            <summary>
            Represents a move that a Pokémon can use in battle, defining its properties and special effects.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IMove.Name">
            <summary>
            Gets the name of the move.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IMove.Type">
            <summary>
            Gets the type of the move.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IMove.Power">
            <summary>
            Gets the power of the move.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IMove.Level">
            <summary>
            Gets the level at which the Pokémon can learn this move.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IMove.MaxHits">
            <summary>
            Gets the maximum number of hits the move can deal in one turn.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IMove.RecoilPercentage">
            <summary>
            Gets the percentage of damage dealt as recoil to the user.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IMove.HealingPercentage">
            <summary>
            Gets the percentage of HP healed by the move.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IMove.ValidateMove(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Validates whether this move is compatible with the given Pokémon.
            </summary>
            <param name="pokemon">The Pokémon to validate against.</param>
            <returns><c>true</c> if the move is compatible with the Pokémon's type and level; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:PokemonGameLib.Interfaces.IPokemon">
            <summary>
            Represents a Pokémon with properties for name, type, level, stats, abilities, and methods to manage its state.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.Name">
            <summary>
            Gets the name of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.Type">
            <summary>
            Gets the type of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.Level">
            <summary>
            Gets the level of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.MaxHP">
            <summary>
            Gets the maximum HP of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.CurrentHP">
            <summary>
            Gets the current HP of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.Attack">
            <summary>
            Gets the attack stat of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.Defense">
            <summary>
            Gets the defense stat of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.Moves">
            <summary>
            Gets the list of moves the Pokémon knows.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.Status">
            <summary>
            Gets the status condition of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.IPokemon.Evolutions">
            <summary>
            Gets the list of possible evolutions for the Pokémon.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.LevelUp">
            <summary>
            Levels up the Pokémon, increasing its level and improving its stats.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.TakeDamage(System.Int32)">
            <summary>
            Applies damage to the Pokémon.
            </summary>
            <param name="damage">The amount of damage to apply.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.Heal(System.Int32)">
            <summary>
            Heals the Pokémon by a specified amount.
            </summary>
            <param name="amount">The amount to heal.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.LowerStat(System.String,System.Int32)">
            <summary>
            Lowers a specific stat of the Pokémon by a specified amount.
            </summary>
            <param name="stat">The stat to lower (e.g., "Attack" or "Defense").</param>
            <param name="amount">The amount to lower the stat by.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.IsFainted">
            <summary>
            Determines whether the Pokémon has fainted.
            </summary>
            <returns><c>true</c> if the Pokémon's HP is less than or equal to 0; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.AddMove(PokemonGameLib.Interfaces.IMove)">
            <summary>
            Adds a move to the Pokémon's move list.
            </summary>
            <param name="move">The move to add to the Pokémon's move list.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.InflictStatus(PokemonGameLib.Models.Pokemons.StatusCondition)">
            <summary>
            Inflicts a status condition on the Pokémon.
            </summary>
            <param name="status">The status condition to inflict.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.ApplyStatusEffects">
            <summary>
            Applies the effects of the current status condition on the Pokémon.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.CureStatus">
            <summary>
            Cures the Pokémon of any status condition.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.SetSleepDuration(System.Int32)">
            <summary>
            Sets the sleep duration when the Pokémon falls asleep.
            </summary>
            <param name="duration">The number of turns the Pokémon will remain asleep.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.CanEvolve">
            <summary>
            Determines whether the Pokémon can evolve based on its current state and evolution criteria.
            </summary>
            <returns><c>true</c> if the Pokémon can evolve; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PokemonGameLib.Interfaces.IPokemon.Evolve">
            <summary>
            Evolves the Pokémon to its next form if the criteria are met.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Interfaces.ITrainer">
            <summary>
            Represents a trainer in the Pokémon game, managing a team of Pokémon and facilitating interactions during battles.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.ITrainer.Name">
            <summary>
            The name of the trainer.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.ITrainer.CurrentPokemon">
            <summary>
            The frist pokemon for the trainer.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Interfaces.ITrainer.Pokemons">
            <summary>
            The list of Pokémon in the trainer's collection.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ITrainer.AddItem(PokemonGameLib.Interfaces.IItem)">
            <summary>
            Adds an item to the trainer's inventory.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ITrainer.RemoveItem(PokemonGameLib.Interfaces.IItem)">
            <summary>
            Removes an item from the trainer's inventory.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ITrainer.AddPokemon(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Adds a Pokémon to the trainer's collection.
            </summary>
            <param name="pokemon">The Pokémon to add.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ITrainer.RemovePokemon(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Removes a Pokémon from the trainer's collection.
            </summary>
            <param name="pokemon">The Pokémon to remove.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ITrainer.ValidateTrainer">
            <summary>
            Validates the trainer's state, ensuring they have a name, a current Pokémon, at least one Pokémon in their collection, and no fainted Pokémon.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ITrainer.TakeTurn(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            The trainer takes a turn in the battle, selecting a move or switching Pokémon.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ITrainer.HandleFaintedPokemon(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Handles the event of a Pokémon fainting in battle.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="T:PokemonGameLib.Interfaces.ITypeEffectivenessService">
            <summary>
            Service for calculating the effectiveness of a move's type against a Pokémon's type.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Interfaces.ITypeEffectivenessService.GetEffectiveness(PokemonGameLib.Models.Pokemons.PokemonType,PokemonGameLib.Models.Pokemons.PokemonType)">
            <summary>
            Gets the effectiveness multiplier of a move's type against a Pokémon's type.
            </summary>
            <param name="attackType">The type of the move being used.</param>
            <param name="defenseType">The type of the defending Pokémon.</param>
            <returns>A multiplier representing the effectiveness.</returns>
        </member>
        <member name="T:PokemonGameLib.Models.Battles.Battle">
            <summary>
            Represents a Pokémon battle between two trainers.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Battles.Battle.CurrentTrainer">
            <summary>
            Gets the current trainer whose turn it is.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Battles.Battle.OpponentTrainer">
            <summary>
            Gets the opposing trainer in the battle.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.#ctor(PokemonGameLib.Interfaces.ITrainer,PokemonGameLib.Interfaces.ITrainer)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Battles.Battle"/> class.
            </summary>
            <param name="trainer1">The first trainer participating in the battle.</param>
            <param name="trainer2">The second trainer participating in the battle.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.StartBattle">
            <summary>
            Starts the Pokémon battle and continues until a trainer is victorious.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.PerformAttack(PokemonGameLib.Interfaces.IMove)">
            <summary>
            Performs an attack using a specified move in the battle.
            </summary>
            <param name="move">The move to be used for the attack.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.PerformSwitch(PokemonGameLib.Interfaces.ITrainer,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Switches the current Pokémon of a trainer with a new Pokémon.
            </summary>
            <param name="trainer">The trainer performing the switch.</param>
            <param name="newPokemon">The new Pokémon to switch to.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.PerformUseItem(PokemonGameLib.Interfaces.IItem,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Uses an item on a target Pokémon during the battle.
            </summary>
            <param name="item">The item to be used.</param>
            <param name="targetPokemon">The target Pokémon that the item will be used on.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.SwitchTurns">
            <summary>
            Switches turns between the two trainers.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.IsBattleOver">
            <summary>
            Determines if the battle is over, i.e., if all Pokémon of either trainer have fainted.
            </summary>
            <returns>True if the battle is over (all Pokémon of either trainer have fainted), otherwise false.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.GetWinner">
            <summary>
            Gets the winner of the battle.
            </summary>
            <returns>The trainer who won the battle, or null if the battle is not yet over.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.DetermineBattleResult">
            <summary>
            Determines the result of the battle.
            </summary>
            <returns>A string representing the result of the battle.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.PrintBattleStatus">
            <summary>
            Prints the current status of the battle, including each trainer's active Pokémon and their HP.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.PrintPokemonStatus(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Prints the status of a given Pokémon, including its name and current HP.
            </summary>
            <param name="pokemon">The Pokémon whose status is being printed.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.PrintBattleResult">
            <summary>
            Prints the result of the battle.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.AddToLastTwoActions(System.String)">
            <summary>
            Adds the latest action to the queue of the last four actions performed in the battle.
            </summary>
            <param name="action">The action to be added.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Battles.Battle.ClearLastTwoActions">
            <summary>
            Clears the list of the last two actions performed in the battle.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Models.Items.Item">
            <summary>
            Represents an item that can be used in battles to affect Pokémon or trainers.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Items.Item.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Items.Item.Description">
            <summary>
            Gets the description of the item.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Items.Item._logger">
            <summary>
            The logger for the item.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Items.Item.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Items.Item"/> class.
            </summary>
            <param name="name">The name of the item.</param>
            <param name="description">The description of the item.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the name or description is null or empty.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Items.Item.Use(PokemonGameLib.Interfaces.ITrainer,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Uses the item on a target Pokémon.
            </summary>
            <param name="trainer">The trainer using the item.</param>
            <param name="target">The target Pokémon.</param>
        </member>
        <member name="T:PokemonGameLib.Models.Items.Potion">
            <summary>
            Represents a potion item that heals a Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Items.Potion.HealingAmount">
            <summary>
            Gets the healing amount provided by the potion.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Items.Potion.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Items.Potion"/> class.
            </summary>
            <param name="name">The name of the potion.</param>
            <param name="description">The description of the potion.</param>
            <param name="healingAmount">The healing amount provided by the potion.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the healing amount is less than or equal to 0.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Items.Potion.Use(PokemonGameLib.Interfaces.ITrainer,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Uses the potion to heal a Pokémon.
            </summary>
            <param name="trainer">The trainer using the potion.</param>
            <param name="target">The target Pokémon to heal.</param>
        </member>
        <member name="T:PokemonGameLib.Models.Items.Revive">
            <summary>
            Represents a revive item that restores a fainted Pokémon to partial HP.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Items.Revive.RestorePercentage">
            <summary>
            Gets the percentage of HP that the revive restores.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Items.Revive.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Items.Revive"/> class.
            </summary>
            <param name="name">The name of the revive item.</param>
            <param name="description">The description of the revive item.</param>
            <param name="restorePercentage">The percentage of HP to restore.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the restore percentage is less than or equal to 0 or greater than 100.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Items.Revive.Use(PokemonGameLib.Interfaces.ITrainer,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Uses the revive item to restore a fainted Pokémon's HP.
            </summary>
            <param name="trainer">The trainer using the revive.</param>
            <param name="target">The fainted Pokémon to restore.</param>
        </member>
        <member name="T:PokemonGameLib.Models.Pokemons.Evolutions.Evolution">
            <summary>
            Represents a Pokémon evolution condition, determining when a Pokémon can evolve.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Evolutions.Evolution.EvolvedFormName">
            <summary>
            Gets the name of the evolved form.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Evolutions.Evolution.RequiredLevel">
            <summary>
            Gets the level required for the evolution to occur.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Evolutions.Evolution.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Pokemons.Evolutions.Evolution"/> class.
            </summary>
            <param name="evolvedFormName">The name of the evolved form.</param>
            <param name="requiredLevel">The level required for evolution.</param>
            <exception cref="T:System.ArgumentException">Thrown if the evolved form name is null or empty, or if the required level is less than 1.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Evolutions.Evolution.CanEvolve(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Determines if a Pokémon can evolve based on its level.
            </summary>
            <param name="pokemon">The Pokémon to check.</param>
            <returns><c>true</c> if the Pokémon can evolve; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the Pokémon is null.</exception>
        </member>
        <member name="T:PokemonGameLib.Models.Pokemons.Moves.Move">
            <summary>
            Represents a move that a Pokémon can use in battle, defining its properties and special effects.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Moves.Move.Name">
            <summary>
            Gets the name of the move.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Moves.Move.Type">
            <summary>
            Gets the type of the move.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Moves.Move.Power">
            <summary>
            Gets the power of the move.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Moves.Move.Level">
            <summary>
            Gets the level at which the Pokémon can learn this move.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Moves.Move.MaxHits">
            <summary>
            Gets the maximum number of hits the move can deal in one turn.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Moves.Move.RecoilPercentage">
            <summary>
            Gets the percentage of damage dealt as recoil to the user.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Moves.Move.HealingPercentage">
            <summary>
            Gets the percentage of HP healed by the move.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Moves.Move.#ctor(System.String,PokemonGameLib.Models.Pokemons.PokemonType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Pokemons.Moves.Move"/> class, defining its properties and special effects.
            </summary>
            <param name="name">The name of the move.</param>
            <param name="type">The type of the move.</param>
            <param name="power">The power of the move.</param>
            <param name="level">The level at which the move can be learned.</param>
            <param name="maxHits">The maximum number of hits the move can deal in one turn. Default is 1.</param>
            <param name="recoilPercentage">The percentage of damage dealt as recoil to the user. Default is 0.</param>
            <param name="healingPercentage">The percentage of HP healed by the move. Default is 0.</param>
            <exception cref="T:System.ArgumentException">Thrown if the move name is null or empty, the type is invalid, the power is negative, or the level is less than 1.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Moves.Move.ValidateMove(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Validates whether this move is compatible with the given Pokémon.
            </summary>
            <param name="pokemon">The Pokémon to validate against.</param>
            <returns><c>true</c> if the move is compatible with the Pokémon's type and level; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:PokemonGameLib.Models.Pokemons.Pokemon">
            <summary>
            Represents a Pokémon with properties for name, type, level, stats, abilities, and methods to manage its state.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.Name">
            <summary>
            Gets the name of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.Type">
            <summary>
            Gets the type of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.Level">
            <summary>
            Gets the level of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.MaxHP">
            <summary>
            Gets the maximum HP of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.CurrentHP">
            <summary>
            Gets the current HP of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.Attack">
            <summary>
            Gets the attack stat of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.Defense">
            <summary>
            Gets the defense stat of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.Moves">
            <summary>
            Gets the list of moves the Pokémon knows.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.Status">
            <summary>
            Gets the current status condition of the Pokémon.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Pokemons.Pokemon.Evolutions">
            <summary>
            Gets the list of possible evolutions for the Pokémon.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.Pokemon._sleepCounter">
            <summary>
            The counter for the number of turns the Pokémon will remain asleep.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.#ctor(System.String,PokemonGameLib.Models.Pokemons.PokemonType,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{PokemonGameLib.Interfaces.IEvolution})">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Pokemons.Pokemon"/> class.
            </summary>
            <param name="name">The name of the Pokémon.</param>
            <param name="type">The type of the Pokémon.</param>
            <param name="level">The level of the Pokémon.</param>
            <param name="maxHp">The maximum HP of the Pokémon.</param>
            <param name="attack">The attack stat of the Pokémon.</param>
            <param name="defense">The defense stat of the Pokémon.</param>
            <param name="evolutions">A list of possible evolutions for the Pokémon. Default is an empty list.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the name is null or whitespace.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the type is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if level, maxHp, attack, or defense are out of valid range.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.LevelUp">
            <summary>
            Levels up the Pokémon, increasing its level and improving its stats.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.TakeDamage(System.Int32)">
            <summary>
            Applies damage to the Pokémon, reducing its current HP.
            </summary>
            <param name="damage">The amount of damage to apply.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.Heal(System.Int32)">
            <summary>
            Heals the Pokémon by the specified amount.
            </summary>
            <param name="amount">The amount to heal.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.LowerStat(System.String,System.Int32)">
            <summary>
            Lowers the specified stat of the Pokémon by the given amount.
            </summary>
            <param name="stat">The stat to lower (e.g., "Attack", "Defense").</param>
            <param name="amount">The amount to lower the stat by.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.IsFainted">
            <summary>
            Determines whether the Pokémon has fainted.
            </summary>
            <returns><c>true</c> if the Pokémon's current HP is 0 or less; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.AddMove(PokemonGameLib.Interfaces.IMove)">
            <summary>
            Adds a move to the Pokémon's move list.
            </summary>
            <param name="move">The move to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the move is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the Pokémon already knows 4 moves.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the Pokémon already knows the move, or if the move is not compatible with the Pokémon's type or level.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.RemoveMove(PokemonGameLib.Interfaces.IMove)">
            <summary>
            Removes the specified move from the Pokémon's move set.
            </summary>
            <param name="move">The move to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="move"/> is <c>null</c>.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.InflictStatus(PokemonGameLib.Models.Pokemons.StatusCondition)">
            <summary>
            Inflicts a status condition on the Pokémon.
            </summary>
            <param name="status">The status condition to inflict.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.ApplyStatusEffects">
            <summary>
            Applies the effects of the current status condition on the Pokémon.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.CureStatus">
            <summary>
            Cures the Pokémon of its current status condition.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.SetSleepDuration(System.Int32)">
            <summary>
            Sets the duration of sleep for the Pokémon.
            </summary>
            <param name="duration">The number of turns the Pokémon will remain asleep.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.CanEvolve">
            <summary>
            Determines whether the Pokémon can evolve based on its current state and evolution criteria.
            </summary>
            <returns><c>true</c> if the Pokémon can evolve; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Pokemons.Pokemon.Evolve">
            <summary>
            Evolves the Pokémon to its next form if the criteria are met.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Models.Pokemons.PokemonType">
            <summary>
            Represents the different types of Pokémon in the game.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Fire">
            <summary>
            Fire type Pokémon, characterized by their ability to use fire-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Water">
            <summary>
            Water type Pokémon, characterized by their ability to use water-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Grass">
            <summary>
            Grass type Pokémon, characterized by their ability to use grass-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Electric">
            <summary>
            Electric type Pokémon, characterized by their ability to use electric-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Psychic">
            <summary>
            Psychic type Pokémon, characterized by their ability to use psychic-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Ice">
            <summary>
            Ice type Pokémon, characterized by their ability to use ice-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Dragon">
            <summary>
            Dragon type Pokémon, characterized by their ability to use dragon-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Dark">
            <summary>
            Dark type Pokémon, characterized by their ability to use dark-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Fairy">
            <summary>
            Fairy type Pokémon, characterized by their ability to use fairy-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Normal">
            <summary>
            Normal type Pokémon, characterized by their basic abilities and attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Fighting">
            <summary>
            Fighting type Pokémon, characterized by their ability to use fighting-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Flying">
            <summary>
            Flying type Pokémon, characterized by their ability to use flying-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Poison">
            <summary>
            Poison type Pokémon, characterized by their ability to use poison-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Ground">
            <summary>
            Ground type Pokémon, characterized by their ability to use ground-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Rock">
            <summary>
            Rock type Pokémon, characterized by their ability to use rock-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Bug">
            <summary>
            Bug type Pokémon, characterized by their ability to use bug-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Ghost">
            <summary>
            Ghost type Pokémon, characterized by their ability to use ghost-based attacks.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.PokemonType.Steel">
            <summary>
            Steel type Pokémon, characterized by their ability to use steel-based attacks.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Models.Pokemons.StatusCondition">
            <summary>
            Represents status conditions that can affect a Pokémon during battle.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.StatusCondition.None">
            <summary>
            No status condition is present.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.StatusCondition.Paralysis">
            <summary>
            The Pokémon is paralyzed and has a 25% chance of being unable to move each turn.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.StatusCondition.Sleep">
            <summary>
            The Pokémon is asleep and cannot move for 1-3 turns.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.StatusCondition.Burn">
            <summary>
            The Pokémon is burned and loses 1/8 of its maximum HP each turn.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.StatusCondition.Freeze">
            <summary>
            The Pokémon is frozen and cannot move until thawed.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Pokemons.StatusCondition.Poison">
            <summary>
            The Pokémon is poisoned and loses 1/8 of its maximum HP each turn.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Models.Trainers.AITrainer">
            <summary>
            Represents an AI-controlled trainer in a Pokémon battle.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.AITrainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Trainers.AITrainer"/> class.
            </summary>
            <param name="name">The name of the AI trainer.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.AITrainer.TakeTurn(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Executes the AI trainer's turn in the battle.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.AITrainer.ShouldSwitchPokemon(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Determines whether the AI trainer should switch Pokémon based on the battle situation.
            </summary>
            <param name="battle">The current battle instance.</param>
            <returns>True if the AI should switch Pokémon, otherwise false.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.AITrainer.SelectBestPokemonToSwitchTo(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Selects the best Pokémon for the AI trainer to switch to.
            </summary>
            <param name="battle">The current battle instance.</param>
            <returns>The best Pokémon to switch to, or null if no suitable Pokémon is available.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.AITrainer.SelectBestMove(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Selects the best move for the AI trainer's Pokémon to use.
            </summary>
            <param name="battle">The current battle instance.</param>
            <returns>The best move to use, or null if no suitable move is available.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.AITrainer.ShouldUseItem(PokemonGameLib.Interfaces.IItem@,PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Determines whether the AI trainer should use an item during the battle.
            </summary>
            <param name="itemToUse">The item that should be used, if any.</param>
            <param name="battle">The current battle instance.</param>
            <returns>True if the AI should use an item, otherwise false.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.AITrainer.HandleFaintedPokemon(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Handles the situation when the AI trainer's current Pokémon has fainted.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="T:PokemonGameLib.Models.Trainers.PlayerTrainer">
            <summary>
            Represents a player-controlled trainer in a Pokémon battle.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.PlayerTrainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Trainers.PlayerTrainer"/> class.
            </summary>
            <param name="name">The name of the player trainer.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.PlayerTrainer.TakeTurn(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Executes the player's turn in the battle.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.PlayerTrainer.PerformAttack(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Performs an attack with the player's current Pokémon.
            </summary>
            <param name="battle">The current battle instance.</param>
            <returns>True if the attack was performed, otherwise false.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.PlayerTrainer.SwitchPokemon(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Switches the player's current Pokémon to another Pokémon in their party.
            </summary>
            <param name="battle">The current battle instance.</param>
            <returns>True if the Pokémon was switched, otherwise false.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.PlayerTrainer.UseItem(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Uses an item from the player's inventory on a Pokémon.
            </summary>
            <param name="battle">The current battle instance.</param>
            <returns>True if the item was used, otherwise false.</returns>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.PlayerTrainer.HandleFaintedPokemon(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Handles the situation when the player's current Pokémon has fainted.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="T:PokemonGameLib.Models.Trainers.Trainer">
            <summary>
            Represents a trainer in the Pokémon game. A trainer manages a team of Pokémon and interacts with the game during battles.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Models.Trainers.Trainer._pokemons">
            <summary>
            A list of Pokémon owned by the trainer.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Trainers.Trainer.Name">
            <summary>
            Gets the name of the trainer.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Trainers.Trainer.CurrentPokemon">
            <summary>
            Gets or sets the current Pokémon being used by the trainer.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Trainers.Trainer.Pokemons">
            <summary>
            Gets a read-only list of all Pokémon owned by the trainer.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Models.Trainers.Trainer.Items">
            <summary>
            A list of items owned by the trainer, used internally within the class.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.Trainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Models.Trainers.Trainer"/> class with the specified name.
            </summary>
            <param name="name">The name of the trainer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the name is null.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.Trainer.ValidateTrainer">
            <summary>
            Validates the trainer's properties to ensure they meet certain criteria.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the trainer's name is null or whitespace, 
            if the current Pokémon is null or not in the trainer's collection, 
            or if the trainer has no Pokémon or only fainted Pokémon in their collection.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.Trainer.AddPokemon(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Adds a Pokémon to the trainer's collection.
            </summary>
            <param name="pokemon">The Pokémon to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the Pokémon is null.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.Trainer.RemovePokemon(PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Removes a Pokémon from the trainer's collection.
            </summary>
            <param name="pokemon">The Pokémon to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the Pokémon is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the Pokémon to remove is not in the trainer's list.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.Trainer.AddItem(PokemonGameLib.Interfaces.IItem)">
            <summary>
            Adds an item to the trainer's inventory.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.Trainer.RemoveItem(PokemonGameLib.Interfaces.IItem)">
            <summary>
            Removes an item from the trainer's inventory.
            </summary>
            <param name="item">The item to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the item is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the item to remove is not in the trainer's inventory.</exception>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.Trainer.TakeTurn(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Executes the trainer's turn in the battle.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="M:PokemonGameLib.Models.Trainers.Trainer.HandleFaintedPokemon(PokemonGameLib.Interfaces.IBattle)">
            <summary>
            Handles the situation when the trainer's current Pokémon has fainted.
            </summary>
            <param name="battle">The current battle instance.</param>
        </member>
        <member name="T:PokemonGameLib.Services.BattleCalculator">
            <summary>
            Provides methods for calculating various aspects of Pokémon battles.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Services.BattleCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Services.BattleCalculator"/> class.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Services.BattleCalculator.CalculateDamage(PokemonGameLib.Interfaces.IPokemon,PokemonGameLib.Interfaces.IPokemon,PokemonGameLib.Interfaces.IMove)">
            <summary>
            Calculates the damage dealt by a Pokémon move.
            </summary>
            <param name="attacker">The attacking Pokémon.</param>
            <param name="defender">The defending Pokémon.</param>
            <param name="move">The move being used by the attacker.</param>
            <returns>The amount of damage dealt to the defender.</returns>
        </member>
        <member name="M:PokemonGameLib.Services.BattleCalculator.CalculateRecoilDamage(PokemonGameLib.Interfaces.IPokemon,PokemonGameLib.Interfaces.IMove)">
            <summary>
            Calculates the recoil damage that the attacker takes after using a move.
            </summary>
            <param name="attacker">The attacking Pokémon.</param>
            <param name="move">The move that caused recoil.</param>
            <returns>The amount of recoil damage.</returns>
        </member>
        <member name="M:PokemonGameLib.Services.BattleCalculator.GetEffectivenessMessage(System.Double)">
            <summary>
            Gets the message describing the effectiveness of the move.
            </summary>
            <param name="effectiveness">The effectiveness multiplier.</param>
            <returns>A string message describing the effectiveness.</returns>
        </member>
        <member name="M:PokemonGameLib.Services.BattleCalculator.IsCriticalHit">
            <summary>
            Determines if the move is a critical hit based on the critical hit chance.
            </summary>
            <returns>True if the move is a critical hit; otherwise, false.</returns>
        </member>
        <member name="M:PokemonGameLib.Services.BattleCalculator.CalculateHealingAmount(PokemonGameLib.Interfaces.IPokemon,PokemonGameLib.Interfaces.IMove)">
            <summary>
            Calculates the amount of HP a Pokémon should heal based on the move used.
            </summary>
            <param name="attacker">The Pokémon using the healing move.</param>
            <param name="move">The move being used that has a healing effect.</param>
            <returns>The amount of HP the Pokémon should recover.</returns>
        </member>
        <member name="T:PokemonGameLib.Services.TypeEffectivenessService">
            <summary>
            Provides methods to determine type effectiveness in Pokémon battles.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Services.TypeEffectivenessService.Instance">
            <summary>
            Gets the singleton instance of the TypeEffectivenessService.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Services.TypeEffectivenessService._effectiveness">
            <summary>
            A dictionary that maps a tuple of attacking and defending Pokémon types to their effectiveness multiplier.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Services.TypeEffectivenessService.#ctor">
            <summary>
            Private constructor to prevent external instantiation.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Services.TypeEffectivenessService.GetEffectiveness(PokemonGameLib.Models.Pokemons.PokemonType,PokemonGameLib.Models.Pokemons.PokemonType)">
            <summary>
            Gets the effectiveness of an attacking Pokémon's move type against a defending Pokémon's type.
            </summary>
            <param name="attackType">The type of the attacking move.</param>
            <param name="defenseType">The type of the defending Pokémon.</param>
            <returns>A multiplier representing the effectiveness of the attack.</returns>
        </member>
        <member name="M:PokemonGameLib.Services.TypeEffectivenessService.GetEffectivenessDictionary">
            <summary>
            Gets the type effectiveness dictionary.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Utilities.BattleValidator">
            <summary>
            Provides validation methods for Pokémon battles, ensuring the validity of moves and Pokémon switches.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Utilities.BattleValidator.ValidateMove(PokemonGameLib.Interfaces.IPokemon,PokemonGameLib.Interfaces.IMove)">
            <summary>
            Validates whether a specified move can be used by the attacking Pokémon.
            </summary>
            <param name="attacker">The Pokémon attempting to use the move.</param>
            <param name="move">The move to validate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either the attacker or the move is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the move is not available to the attacker.</exception>
        </member>
        <member name="M:PokemonGameLib.Utilities.BattleValidator.ValidatePokemonSwitch(PokemonGameLib.Interfaces.ITrainer,PokemonGameLib.Interfaces.IPokemon)">
            <summary>
            Validates whether a Pokémon can be switched into battle by the trainer.
            </summary>
            <param name="trainer">The trainer attempting to switch Pokémon.</param>
            <param name="newPokemon">The new Pokémon to switch to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either the trainer or the new Pokémon is null.</exception>
            <exception cref="T:PokemonGameLib.Exceptions.InvalidPokemonSwitchException">
            Thrown if the new Pokémon is not owned by the trainer or if the Pokémon has fainted.
            </exception>
        </member>
        <member name="T:PokemonGameLib.Utilities.Loggable">
            <summary>
            Provides a base class for logging messages within the Pokémon game library. 
            Classes that inherit from <see cref="T:PokemonGameLib.Utilities.Loggable"/> can easily log informational, warning, and error messages.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.Loggable._logger">
            <summary>
            The logger instance used to log messages.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Utilities.Loggable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Utilities.Loggable"/> class and retrieves the logger instance.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Utilities.Loggable.LogInfo(System.String)">
            <summary>
            Logs an informational message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PokemonGameLib.Utilities.Loggable.LogWarning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PokemonGameLib.Utilities.Loggable.LogError(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:PokemonGameLib.Utilities.Logger">
            <summary>
            Provides a logger implementation that logs messages to a file in YAML format.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.Logger._logFilePath">
            <summary>
            The file path where log entries are written.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.Logger._lock">
            <summary>
            Object used to synchronize access to the log file.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.Logger._encoding">
            <summary>
            The encoding used for writing log entries to the file.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Utilities.Logger.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Utilities.Logger"/> class with the specified log file path and optional encoding.
            </summary>
            <param name="logFilePath">The file path where log entries will be written.</param>
            <param name="encoding">The encoding to use when writing log entries. If null, UTF-8 encoding is used.</param>
        </member>
        <member name="M:PokemonGameLib.Utilities.Logger.LogInfo(System.String)">
            <summary>
            Logs an informational message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PokemonGameLib.Utilities.Logger.LogWarning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PokemonGameLib.Utilities.Logger.LogError(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PokemonGameLib.Utilities.Logger.Log(System.String,System.String)">
            <summary>
            Logs a message with the specified severity.
            </summary>
            <param name="severity">The severity of the message (e.g., INFO, WARNING, ERROR).</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:PokemonGameLib.Utilities.Logger.FormatLogEntry(System.String,System.String)">
            <summary>
            Formats a log entry with the specified severity and message.
            </summary>
            <param name="severity">The severity of the log entry.</param>
            <param name="message">The message to include in the log entry.</param>
            <returns>A formatted log entry as a string in YAML format.</returns>
        </member>
        <member name="T:PokemonGameLib.Utilities.LoggingService">
            <summary>
            Provides a service for configuring and retrieving a logger instance used across the application.
            This service ensures that the logger is a singleton and is thread-safe.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.LoggingService._lock">
            <summary>
            Object used to synchronize access to the logger.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.LoggingService._logger">
            <summary>
            The logger instance managed by this service.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.LoggingService._isConfigured">
            <summary>
            Indicates whether the logger has been configured.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Utilities.LoggingService.Configure(System.String)">
            <summary>
            Configures the logging service by setting up the logger instance with the specified file path.
            If no file path is provided, a default path on the desktop is used.
            </summary>
            <param name="logFilePath">The file path where logs will be written. If null, a default path is used.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the logger has already been configured.</exception>
        </member>
        <member name="M:PokemonGameLib.Utilities.LoggingService.GetLogger">
            <summary>
            Retrieves the logger instance managed by this service.
            </summary>
            <returns>The logger instance.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the logger has not been configured.</exception>
        </member>
        <member name="M:PokemonGameLib.Utilities.LoggingService.ResetConfiguration">
            <summary>
            Resets the configuration of the logging service, allowing it to be reconfigured.
            </summary>
        </member>
        <member name="T:PokemonGameLib.Utilities.RandomNumberGenerator">
            <summary>
            Provides methods for generating random numbers, supporting both integer and double ranges.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.RandomNumberGenerator._instance">
            <summary>
            A singleton instance of <see cref="T:PokemonGameLib.Utilities.RandomNumberGenerator"/>, ensuring only one instance is created.
            </summary>
        </member>
        <member name="F:PokemonGameLib.Utilities.RandomNumberGenerator._random">
            <summary>
            The underlying random number generator.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Utilities.RandomNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PokemonGameLib.Utilities.RandomNumberGenerator"/> class.
            </summary>
        </member>
        <member name="P:PokemonGameLib.Utilities.RandomNumberGenerator.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:PokemonGameLib.Utilities.RandomNumberGenerator"/> class.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Utilities.RandomNumberGenerator.Generate(System.Double,System.Double)">
            <summary>
            Generates a random double value within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>A double value that is greater than or equal to <paramref name="minValue"/> and less than or equal to <paramref name="maxValue"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:PokemonGameLib.Utilities.RandomNumberGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            Generates a random integer value within the specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned.</param>
            <returns>An integer value that is greater than or equal to <paramref name="minValue"/> and less than or equal to <paramref name="maxValue"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="T:PokemonGameLib.Utilities.ValidationUtility">
            <summary>
            Provides utility methods for validating Pokémon game objects.
            </summary>
        </member>
        <member name="M:PokemonGameLib.Utilities.ValidationUtility.ValidatePokemon(PokemonGameLib.Interfaces.IPokemon,System.String)">
            <summary>
            Ensures that a Pokémon is not null or fainted.
            </summary>
            <param name="pokemon">The Pokémon to validate.</param>
            <param name="parameterName">The name of the parameter being validated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the Pokémon is null.</exception>
            <exception cref="T:PokemonGameLib.Exceptions.PokemonFaintedException">Thrown if the Pokémon has fainted.</exception>
        </member>
        <member name="M:PokemonGameLib.Utilities.ValidationUtility.ValidateMove(PokemonGameLib.Interfaces.IPokemon,PokemonGameLib.Interfaces.IMove)">
            <summary>
            Ensures that a move is valid for a Pokémon.
            </summary>
            <param name="attacker">The Pokémon to validate the move against.</param>
            <param name="move">The move to validate.</param>
            <exception cref="T:PokemonGameLib.Exceptions.InvalidMoveException">Thrown if the move is invalid for the Pokémon.</exception>
        </member>
    </members>
</doc>
